// Generated by CoffeeScript 1.7.1
(function() {
  var FileFinder, List, bundle, chokidar, f, file, fileFinder, fs, list, output, program, recursive, watcher, _i, _j, _len, _len1, _ref;

  chokidar = require('chokidar');

  program = require("commander");

  FileFinder = require("./FileFinder").FileFinder;

  List = require("./List").List;

  fs = require("fs");

  program.version("0.0.1").option("-v, --verbose", "Show messages").option("-w, --watch", "Watch Files").option("-o, --output [value]", "The file to output all files in. eg application.js").parse(process.argv);

  file = [];

  if (program.args) {
    file = program.args;
  }

  list = new List();

  fileFinder = [];

  recursive = function(file) {
    var e, f, _i, _len, _ref, _results;
    if (program.verbose) {
      console.log("parsing " + file);
    }
    try {
      fileFinder.push(new FileFinder(file, program.watch));
    } catch (_error) {
      e = _error;
      console.log("in " + file + ", file " + e.required + " doesn't exist");
    }
    _ref = fileFinder[fileFinder.length - 1].includeStack;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      f = _ref[_i];
      _results.push(arguments.callee(f.required));
    }
    return _results;
  };

  bundle = function() {
    var stack, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = fileFinder.length; _i < _len; _i++) {
      bundle = fileFinder[_i];
      _results.push((function() {
        var _j, _len1, _ref, _results1;
        _ref = bundle.includeStack;
        _results1 = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          stack = _ref[_j];
          _results1.push(list.append(stack));
        }
        return _results1;
      })());
    }
    return _results;
  };

  output = function() {
    var data, i, item, _i, _ref;
    if (!list.graph) {
      console.log("Nothing to output?");
      process.exit(0);
    }
    if (program.verbose) {
      console.log("Outputing...");
    }
    if (program.output) {
      fs.writeFile(program.output, "");
    }
    for (i = _i = _ref = list.graph.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
      item = list.graph[i];
      data = fs.readFileSync(item, {
        "encoding": "utf-8"
      });
      if (program.output) {
        if (program.verbose) {
          console.log("writing file " + item);
        }
        data = data.replace(/# ?include .+/g, "");
        fs.appendFile(program.output, data + "\n");
      } else {
        console.log(data);
      }
    }
    return console.log("Wrote to " + program.output + " complete");
  };

  if (file.length === 0) {
    console.log("No Input");
  }

  for (_i = 0, _len = file.length; _i < _len; _i++) {
    f = file[_i];
    recursive(f);
  }

  bundle();

  output();

  if (program.watch) {
    watcher = chokidar.watch();
    watcher.on("change", function(file) {
      recursive(file);
      return output();
    });
    _ref = list.graph;
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      file = _ref[_j];
      watcher.add(file);
    }
  }

}).call(this);
