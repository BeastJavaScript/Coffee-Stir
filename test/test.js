// Generated by CoffeeScript 1.7.1
(function() {
  var Include, List, Stacker, TestCase, TestOrder, TestParser, TestResult, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require("../bin/application"), Include = _ref.Include, Stacker = _ref.Stacker, List = _ref.List;

  _ref1 = require("beast-test"), TestCase = _ref1.TestCase, TestResult = _ref1.TestResult;

  new (TestParser = (function(_super) {
    __extends(TestParser, _super);

    function TestParser() {
      TestParser.__super__.constructor.call(this);
    }

    TestParser.prototype.base = function() {
      var inc, inc2, inc3, inc4, inc5, list, stack;
      console.log("___________BASE____________________");
      inc = new Include("number1.js", "number2.js");
      inc2 = new Include("shavauhn.js", "number1.js");
      inc5 = new Include("node.js", "jquery.js");
      inc4 = new Include("node.js", "shavauhn.js");
      inc3 = new Include("jquery.js", "number2.js");
      stack = new Stacker(inc, inc2);
      list = new List();
      list.append(stack, inc5, inc4, inc3);
      return [inc, inc2, stack, list];
    };

    TestParser.prototype.testRequiredSet = function(parser) {
      return this.assertEquals(parser.required, "number1.js");
    };

    TestParser.prototype.testCallerSet = function(parser) {
      return this.assertEquals(parser.caller, "number2.js");
    };

    TestParser.prototype.testStacker = function(inc1, inc2, stack) {
      this.assertEquals(stack.includes.length, 2);
      return this.assertEquals(stack.includes, [inc1, inc2]);
    };

    TestParser.prototype.testList = function(inc1, inc2, stack, list) {
      this.assertEquals(stack.includes.length, 2);
      return this.assertEquals(list.graph.length, 5);
    };

    return TestParser;

  })(TestCase));

  new (TestOrder = (function(_super) {
    __extends(TestOrder, _super);

    function TestOrder() {
      TestOrder.__super__.constructor.call(this);
    }

    TestOrder.prototype.base = function() {
      var inc, inc10, inc2, inc3, inc4, inc5, inc6, inc7, inc8, inc9, list, stack;
      inc = new Include("number1.js", "number2.js");
      inc2 = new Include("shavauhn.js", "number1.js");
      inc3 = new Include("node.js", "jquery.js");
      inc4 = new Include("node.js", "people.js");
      inc5 = new Include("people.js", "gabay.js");
      inc6 = new Include("node.js", "shavauhn.js");
      inc7 = new Include("sky.js", "sun.js");
      inc8 = new Include("people.js", "shavauhn.js");
      inc9 = new Include("node.js", "shavauhn.js");
      inc10 = new Include("jquery.js", "number2.js");
      stack = new Stacker(inc, inc2);
      list = new List();
      list.append(stack, inc5, inc4, inc3, inc6, inc7, inc8, inc9, inc10);
      return list;
    };

    TestOrder.prototype.testListOrder = function(list) {
      this.assertTrue(list.graph.indexOf("number1.js") > list.graph.indexOf("number2.js"));
      this.assertTrue(list.graph.indexOf("shavauhn.js") > list.graph.indexOf("number1.js"));
      this.assertTrue(list.graph.indexOf("node.js") > list.graph.indexOf("jquery.js"));
      this.assertTrue(list.graph.indexOf("node.js") > list.graph.indexOf("people.js"));
      this.assertTrue(list.graph.indexOf("people.js") > list.graph.indexOf("gabay.js"));
      this.assertTrue(list.graph.indexOf("node.js") > list.graph.indexOf("shavauhn.js"));
      this.assertTrue(list.graph.indexOf("sky.js") > list.graph.indexOf("sun.js"));
      this.assertTrue(list.graph.indexOf("people.js") > list.graph.indexOf("shavauhn.js"));
      this.assertTrue(list.graph.indexOf("node.js") > list.graph.indexOf("shavauhn.js"));
      return this.assertTrue(list.graph.indexOf("jquery.js") > list.graph.indexOf("number2.js"));
    };

    return TestOrder;

  })(TestCase));

  console.log(TestCase.getResult());

}).call(this);
