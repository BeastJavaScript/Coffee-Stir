// Generated by CoffeeScript 1.7.1
(function() {
  var Include, List, Stacker,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Stacker = require("./Stacker").Stacker;

  Include = require("./Include").Include;

  List = (function() {
    function List() {
      this.collection = [];
    }

    List.prototype.append = function() {
      var item, parser, _i, _len;
      parser = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = parser.length; _i < _len; _i++) {
        item = parser[_i];
        if (item instanceof Stacker) {
          this.appendStack(item);
        } else if (item instanceof Include) {
          this.appendInclude(item);
        }
      }
      return this.build();
    };

    List.prototype.appendStack = function(stack) {
      var inc, _i, _len, _ref, _results;
      _ref = stack.includes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        inc = _ref[_i];
        _results.push(this.appendInclude(inc));
      }
      return _results;
    };

    List.prototype.appendInclude = function(include) {
      var item, safe, _i, _len, _ref;
      safe = true;
      _ref = this.collection;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.required === include.required && item.caller === include.caller) {
          safe = false;
        }
      }
      if (safe) {
        return this.collection.push(include);
      }
    };

    List.prototype.build = function() {
      var b, bronze, g, gold, inc, s, silver, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1;
      this.graph = [];
      bronze = [];
      silver = [];
      gold = [];
      _ref = this.collection;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        inc = _ref[_i];
        bronze.push(inc.caller);
      }
      _ref1 = this.collection;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        inc = _ref1[_j];
        if (inc.required !== "") {
          silver.push(inc.required);
        }
      }
      for (_k = 0, _len2 = silver.length; _k < _len2; _k++) {
        g = silver[_k];
        if (__indexOf.call(bronze, g) < 0) {
          gold.push(g);
        }
      }
      for (_l = 0, _len3 = bronze.length; _l < _len3; _l++) {
        b = bronze[_l];
        this.graph.push(b);
      }
      for (_m = 0, _len4 = silver.length; _m < _len4; _m++) {
        s = silver[_m];
        this.graph.push(s);
      }
      for (_n = 0, _len5 = gold.length; _n < _len5; _n++) {
        g = gold[_n];
        this.graph.push(g);
      }
      return this.filter();
    };

    List.prototype.filter = function() {
      var file, temp, _i, _len, _ref;
      temp = [];
      _ref = this.graph;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (__indexOf.call(temp, file) >= 0) {
          this.remove(temp, file);
        }
        temp.push(file);
      }
      return this.graph = temp;
    };

    List.prototype.remove = function(array, value) {
      return array.splice(array.indexOf(value), 1);
    };

    return List;

  })();

  if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
    module.exports.List = List;
  }

}).call(this);
