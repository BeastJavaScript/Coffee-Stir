// Generated by CoffeeScript 1.7.1
(function() {
  var FileScanner, fs, path;

  path = require("path");

  fs = require("fs");

  FileScanner = (function() {
    function FileScanner(path, watch) {
      this.path = path;
      this.watch = watch;
      this.files = [];
      this.fileExt = ["coffee", "js"];
      this.fileExt = this.fileExt.join("|");
      this.scan();
    }

    FileScanner.prototype.scan = function() {
      var data;
      data = fs.readFileSync(this.path, {
        encoding: "utf-8"
      });
      this.lines = data.split("\n");
      this.parse();
      return this.complete();
    };

    FileScanner.prototype.getAbsolutePath = function() {
      return path.resolve(this.path);
    };

    FileScanner.prototype.getDirectory = function() {
      return path.dirname(this.getAbsolutePath());
    };

    FileScanner.prototype.parse = function() {
      var line, _i, _len, _ref, _results;
      if (FileScanner.test == null) {
        FileScanner.test = new RegExp("\ *?#include .*");
      }
      _ref = this.lines;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        this.result = FileScanner.test.exec(line);
        if (this.result !== null) {
          _results.push(this.mark(this.result));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    FileScanner.prototype.mark = function(result) {
      var e, f, fileWatch;
      FileScanner.resultTest = new RegExp("[^ ]+\.(" + this.fileExt + ")");
      fileWatch = FileScanner.resultTest.exec(result);
      if (fileWatch) {
        try {
          f = path.resolve(this.getDirectory(), fileWatch[0]);
          fs.statSync(f);
          return this.files.push(f);
        } catch (_error) {
          e = _error;
          return console.log("in " + this.path + " : included file " + fileWatch[0] + " doesn't exist");
        }
      }
    };

    FileScanner.prototype.complete = function() {};

    return FileScanner;

  })();

  if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
    module.exports.FileScanner = FileScanner;
  }

}).call(this);
